[{"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\App.js":"1","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\pages\\index.js":"2","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\pages\\play.js":"3","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\pages\\list.js":"4","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\views\\rank.js":"5","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\views\\recommend.js":"6","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\views\\search.js":"7","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\index.js":"8","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\assets\\js\\remScale.js":"9","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\axios\\axios.js":"10","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\axios\\index.js":"11"},{"size":678,"mtime":1606132483190,"results":"12","hashOfConfig":"13"},{"size":1602,"mtime":1606202601676,"results":"14","hashOfConfig":"13"},{"size":7795,"mtime":1606403872595,"results":"15","hashOfConfig":"13"},{"size":4921,"mtime":1606382914114,"results":"16","hashOfConfig":"13"},{"size":2858,"mtime":1606318175035,"results":"17","hashOfConfig":"13"},{"size":5537,"mtime":1606313619815,"results":"18","hashOfConfig":"13"},{"size":6050,"mtime":1606396005210,"results":"19","hashOfConfig":"13"},{"size":496,"mtime":1606131418285,"results":"20","hashOfConfig":"13"},{"size":753,"mtime":1596770436000,"results":"21","hashOfConfig":"13"},{"size":559,"mtime":1606313618923,"results":"22","hashOfConfig":"13"},{"size":1206,"mtime":1606394665775,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"8r45",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\App.js",[],["52","53"],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\pages\\index.js",[],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\pages\\play.js",["54","55"],"// 导入react核心库\r\nimport React from 'react'\r\n// 引入css\r\nimport '../assets/css/play.css'\r\n// 引入jQuery\r\nimport $ from 'jquery'\r\n// 引入图片\r\nimport img from '../assets/img/song1.jpg'\r\nimport img1 from '../assets/img/z-9.png'\r\nimport img2 from '../assets/img/z-5.png'\r\nimport img3 from '../assets/img/z-1.png'\r\nimport img4 from '../assets/img/z-2.png'\r\nimport img5 from '../assets/img/z-4.png'\r\n// 引入接口\r\nimport { songDetail, playUrl, getLyric, } from '../axios'\r\n// 引入axios\r\nimport axios from 'axios'\r\n// 引入qustring\r\nimport qsString from 'querystring'\r\n// 导出index组件类\r\nexport default class play extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            imgUrl: img,\r\n            conf: img1,\r\n            pole: img2,\r\n            pmid: img3,\r\n            pics1: img4,\r\n            pics2: img5,\r\n            songdetail: {},\r\n            imgg: '',\r\n            songUrl: '',\r\n            lyric: \"\",//保存歌词\r\n            playTime: \"00:00\",\r\n            bool: false//保存开关的状态\r\n        }\r\n        //创建一个播放器的ref\r\n        this.audio = React.createRef();\r\n        //创建一个播放图表的ref\r\n        this.playIcon = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        let qs = this.props.location.search.slice(1);\r\n        axios.all([playUrl({\r\n            id: qsString.parse(qs).id,\r\n        }), getLyric({\r\n            id: qsString.parse(qs).id,\r\n        })])\r\n            .then(axios.spread((songUrl, lyric) => {\r\n                if (songUrl.code === 200) {\r\n                    this.setState({\r\n                        songUrl: songUrl.data[0].url,\r\n                    })\r\n                }\r\n                if (lyric.code === 200) {\r\n                    let lyricInfo = '';\r\n                    lyricInfo = lyric.lrc.lyric;//接收歌词\r\n                    // 设置正则，取值\r\n                    let reg = /\\[(.*?)](.*)/g\r\n                    let obj = {};//空对象用来接收数据\r\n                    // 替换replace\r\n                    lyricInfo.replace(reg, (a, b, c) => {\r\n                        // a,b,c为匹配的每一项\r\n                        b = b.slice(0, 5);//截取所需的数据\r\n                        obj[b] = c;\r\n                    });\r\n                    this.setState({\r\n                        lyric: obj\r\n                    }, () => {\r\n                        let audio = this.audio.current;//接收audio组件\r\n                        audio.ontimeupdate = () => {    //定义组件监听事件，实时进行监听\r\n                            // console.log(audio.currentTime,'xxxxx');\r\n                            // 监控audio组件的时间变化,时间格式转换以便进行匹配\r\n                            let nowTime = this.formateTime(audio.currentTime);//获取到11:11格式的时间数据\r\n                            // 使用if中in方法，获取有歌词的时间\r\n                            if (nowTime in this.state.lyric) {\r\n                                this.setState({\r\n                                    // 得到时间，注意此时nowTime 中保存的都是有歌词的时间\r\n                                    playTime: nowTime\r\n                                }, () => {\r\n                                    // 调取歌词滚动的方法\r\n                                    this.moveLyric()\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            }))\r\n        songDetail({\r\n            ids: qsString.parse(qs).id\r\n        })\r\n            .then(res => {\r\n                if (res.code === 200) {\r\n                    this.setState({\r\n                        songdetail: res.songs[0],\r\n                        imgg: res.songs[0].al.picUrl\r\n                    })\r\n                }\r\n            })\r\n    }\r\n    // 封装歌词滚动函数\r\n    moveLyric() {\r\n        //active此时为高亮显示的p标签,注意jQuery直接取出的是一个集合\r\n        let active = $('.active')[0];\r\n        // index为高亮显示p标签的位置索引\r\n        let index = $('.words').children().index(active);\r\n        let offSet = 20;\r\n        if (active.offsetTop > 3) {\r\n            //更改它位置\r\n            $(\".words\").css(\"transform\", `translateY(-${index * offSet}px)`);\r\n        }\r\n    }\r\n    //封装一个事件格式化的方法\r\n    formateTime(timer) {\r\n        let minutes = (Math.floor(timer / 60) + \"\").padStart(2, \"0\");\r\n        let seconds = (Math.floor(timer % 60) + \"\").padStart(2, \"0\");\r\n        return `${minutes}:${seconds}`;\r\n    }\r\n    // 封装控制暂停播放的事件\r\n    toControl() {\r\n        this.setState(\r\n            {\r\n                bool: !this.state.bool,\r\n            },\r\n            () => {\r\n                if (this.state.bool) {\r\n                    //如果bool是真 代表暂停 出现图标 ，音乐停止\r\n                    this.playIcon.current.style.display = \"block\";\r\n                    this.audio.current.pause();\r\n                } else {\r\n                    //如果bool是假 代表播放 没有图标 ，音乐正在播放\r\n                    this.playIcon.current.style.display = \"none\";\r\n                    this.audio.current.play();\r\n                }\r\n            }\r\n        );\r\n    }\r\n    render() {\r\n        // 解构数据\r\n        let { lyric, songdetail, songUrl, playTime, imgUrl, conf, pole, pmid, pics1, pics2, imgg } = this.state\r\n\r\n        return (\r\n            <div className=\"play\">\r\n                <div className=\"context\" style={{ backgroundImage: 'url(' + imgg + ')' }}></div>\r\n                <div className=\"header\">\r\n                    <img src={conf} alt=\"\" />\r\n                    <span> 网易云音乐</span>\r\n                </div>\r\n                <div className=\"pole\">\r\n                    <img src={pole} alt=\"\" />\r\n                </div>\r\n                <div className=\"p-mid\" onClick={this.toControl.bind(this)}>\r\n                    <img className=\"pic1\" src={pmid} alt=\"\" />\r\n                    <img className=\"pic2\" src={imgg ? imgg : pics1} alt=\"\" />\r\n                    <img className=\"pic3\" src={pics2} alt=\"\" ref={this.playIcon} />\r\n                </div>\r\n                {/* 歌曲信息，渲染数据 */}\r\n                <div className=\"s-info\">\r\n                    <div className=\"title\">{songdetail.name}</div>\r\n                    <div className=\"info\">\r\n                        {/* 歌词存放处 */}\r\n                        <div className=\"words\">\r\n                            {\r\n                                //把对象转化成数组去循环  Object.entries把对象转化成枚举型的数组，类似于for in\r\n                                Object.entries(lyric).map((item, idx) => {\r\n                                    // 此时的item是一个个数组对象两个元素，第一个时间，第二个，歌词\r\n                                    if (playTime == item[0]) {\r\n                                        return (\r\n                                            <p key={idx} className=\"active\">\r\n                                                {item[1]}\r\n                                            </p>\r\n                                        );\r\n                                    } else {\r\n                                        return <p key={idx}>{item[1]}</p>;\r\n                                    }\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"audio_box\">\r\n                    <audio ref={this.audio} src={songUrl} autoPlay></audio>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\pages\\list.js",["56","57"],"// 导入react核心库\r\nimport React from 'react'\r\nimport imgs from '../assets/img/u1.jpg'\r\nimport qstring from 'querystring'\r\n// 引入css \r\nimport '../assets/css/list.css'\r\n// 引入图标\r\nimport { CustomerServiceOutlined } from '@ant-design/icons';\r\n// 引入接口\r\nimport {getHotSong} from '../axios'\r\n\r\n// 导出index组件类\r\nexport default class list extends React.Component{\r\n    constructor(){\r\n        super()\r\n        \r\n        this.state={\r\n            imgUrl:imgs,\r\n            data:{}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let qs = this.props.location.search.slice(1)\r\n        // console.log(qs);\r\n        getHotSong({\r\n            id:qstring.parse(qs).id\r\n        })\r\n        .then(res=>{\r\n            if(res.code===200){\r\n                this.setState({\r\n                    data:res.playlist\r\n                })\r\n            }\r\n            console.log(this.state.data);\r\n        })\r\n    }\r\n    // 组件加载调用接口获取数据\r\n    render(){\r\n        // 解构导入\r\n        let {data,imgUrl} = this.state\r\n        return(\r\n            <div className=\"list\">\r\n                <div className=\"header\">\r\n                    <div className=\"img\" style={{backgroundImage: 'url(' +data.coverImgUrl + ')'}}></div>\r\n                    <div className=\"outer\">\r\n                        <div className=\"left\">\r\n                            <img src={data.coverImgUrl}></img>\r\n                            <div className=\"sum\">\r\n                                    <CustomerServiceOutlined />&nbsp;\r\n                                    <span>{parseInt(data.playCount / 1000) / 10} 万</span>\r\n                                </div>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                            <p className=\"p1\">{data.name}</p>\r\n                            <p className=\"p2\">\r\n                                <img src={data.creator?data.creator.avatarUrl:''}></img>\r\n                                <i>&nbsp;{data.creator?data.creator.nickname:''}</i>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"s-list\">\r\n                    <p>歌曲列表</p>\r\n                </div>\r\n                {/* 音乐列表直接循环 */}\r\n                <div className=\"songlist\">\r\n                    {data.tracks?\r\n                        data.tracks.map((item,index)=>{\r\n                            return (\r\n                                <div className=\"bigbox\" key={item.id}>\r\n                                    <div className=\"smbox\">\r\n                                        <div className=\"number\">&nbsp;{index+1}</div>\r\n                                        <div>\r\n                                            <p className=\"p1\">{item.name}</p>\r\n                                            <p className=\"p2\">\r\n                                                <span></span>\r\n                                                {\r\n                                                    item.ar.map(val=>{\r\n                                                        return (\r\n                                                            <i key={val.name}>{val.name}</i>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                                -<i>{item.name}</i>\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <button>&#9835;</button>\r\n                                </div>\r\n                            )\r\n                        }):''\r\n                    }\r\n                </div>\r\n                {/* 底部评价 */}\r\n                <div className=\"assess\">\r\n                    <div className=\"text\">\r\n                        <p>全部评价</p>\r\n                    </div>\r\n                    {/* 要循环的评价内容 */}\r\n                    <div className=\"context\">\r\n                        <img src={imgUrl} alt=\"\" />\r\n                        <div className=\"c-user\">\r\n                            <p className=\"p1\">人间不值得</p>\r\n                            <p className=\"p2\">2020年11月11日</p>\r\n                            <p className=\"p3\">这首歌真的不错啊这首歌真的不错啊这首歌真的不错啊这首歌真的不错啊这首歌真的不错啊这首歌真的不错啊</p>\r\n                        </div>\r\n                        <button className=\"c-supper\">&#9828;</button>\r\n                    </div>\r\n                </div>\r\n                {/* 查看更多评价 */}\r\n                <div className=\"b-assess\">\r\n                    <p>查看更多评价 &#10132;</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\views\\rank.js",[],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\views\\recommend.js",["58","59"],"// 导入react核心库\r\nimport React from 'react'\r\n// 引入css样式\r\nimport '../assets/css/recommend.css'\r\n\r\n// 引入图标\r\nimport { CustomerServiceOutlined, PlayCircleOutlined } from '@ant-design/icons';\r\n// 引入接口\r\nimport { getMusic, getNewMusic, getBannerList } from '../axios'\r\nimport Axios from 'axios';\r\n// 导入ant\r\nimport { message, } from 'antd';\r\n// 引入swipper\r\nimport '../assets/css/swiper-bundle.css'\r\nimport Swiper from 'swiper'\r\n// 导出index组件类\r\nexport default class recom extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            dataList: [],//推荐歌单列表\r\n            songList: [],//新歌列表\r\n            bannerList: []//轮播图\r\n        }\r\n    }\r\n    // 点击跳转到列表页\r\n    toList(id) {\r\n        this.props.history.push(`/list?id=${id}`)\r\n    }\r\n    // 点击跳转播放页\r\n    toPlay(id) {\r\n        this.props.history.push(`/play?id=${id}`)\r\n    }\r\n    // 挂载函数\r\n    componentDidMount() {\r\n        // 使用axios.all方法\r\n        Axios.all([getMusic({ limit: 6 }), getNewMusic(), getBannerList()])\r\n            .then(Axios.spread((res1, res2, res3) => {\r\n                if (res1.code === 200 && res2.code === 200 && res3.code === 200) {\r\n                    this.setState({\r\n                        dataList: res1.result,\r\n                        songList: res2.result,\r\n                        bannerList: res3.banners\r\n                    })\r\n                } else {\r\n                    message.error('网络错误，请稍后再试')\r\n                }\r\n            }));\r\n    }\r\n    // 轮播效果放到更新函数中\r\n    componentDidUpdate(){\r\n        // 实例化swipper\r\n        new Swiper('.swiper-container',{\r\n            autoplay:{\r\n                delay:2000\r\n            },\r\n            loop: true,\r\n        });\r\n    }\r\n    render() {\r\n        // 解构数据\r\n        const { dataList, songList, bannerList } = this.state;\r\n        return (\r\n            <div className=\"recom\">\r\n                {/* 插入轮播图 */}\r\n                <div className='banner'>\r\n                    <div className=\"header\"></div>\r\n                    <div className=\"b-box\">\r\n                        <div className=\"swiper-container\">\r\n                            <div className=\"swiper-wrapper\">\r\n                                {bannerList.map(item => {\r\n                                    return (\r\n                                        <div className=\"swiper-slide\" key={item.imageUrl}>\r\n                                            <img src={item.imageUrl} />\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* 推荐歌单 */}\r\n                <div className=\"title\">\r\n                    <span className=\"span1\"></span>\r\n                    <span className=\"span2\">推荐歌单</span>\r\n                </div>\r\n                <div className=\"rBox\">\r\n                    {\r\n                        dataList.map(item => {\r\n                            return (<div className=\"sBox\" key={item.id} onClick={() => this.toList(item.id)}>\r\n                                <img src={item.picUrl} />\r\n                                <p>{item.name}</p>\r\n                                <div className=\"sum\">\r\n                                    <CustomerServiceOutlined />&nbsp;\r\n                                    <span>{parseInt(item.playCount / 1000) / 10} 万</span>\r\n                                </div>\r\n                            </div>)\r\n                        })\r\n                    }\r\n                </div>\r\n                {/* 最新音乐 */}\r\n                <div className=\"title1\">\r\n                    <span className=\"span1\"></span>\r\n                    <span className=\"span2\">最新音乐</span>\r\n                </div>\r\n                {/* 音乐列表直接循环 */}\r\n                <div className=\"songlist\">\r\n                    {\r\n                        songList.map(item => {\r\n                            return (\r\n                                <div className=\"bigbox\" key={item.id}>\r\n                                    <div className=\"smbox\">\r\n                                        <p className=\"p1\">{item.name}</p>\r\n                                        <p className=\"p2\"><span></span> {item.song.artists.map(val => {\r\n                                            return (\r\n                                                <i key={val.id}>{val.name}&nbsp;</i>\r\n                                            )\r\n                                        })}\r\n                                        -<i>{item.name}</i>\r\n                                        </p>\r\n                                    </div>\r\n                                    <button onClick={() => this.toPlay(item.id)}><PlayCircleOutlined /></button>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                {/* 底部栏 */}\r\n                <div className=\"footer\">\r\n                    <div className=\"text\">网易云音乐</div>\r\n                    <div className=\"textapp\">打开APP，发现更多好音乐&gt;</div>\r\n                    <p>网易公司版权所有©1997-2020   杭州乐读科技有限公司运营</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\views\\search.js",["60"],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\index.js",[],["61","62"],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\assets\\js\\remScale.js",[],["63","64"],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\axios\\axios.js",[],"F:\\第四阶段\\20.11.23第四周\\网易云项目\\musicproject\\src\\axios\\index.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":141,"column":53,"nodeType":"71","messageId":"72","endLine":141,"endColumn":59},{"ruleId":"73","severity":1,"message":"74","line":168,"column":50,"nodeType":"75","messageId":"76","endLine":168,"endColumn":52},{"ruleId":"77","severity":1,"message":"78","line":47,"column":29,"nodeType":"79","endLine":47,"endColumn":57},{"ruleId":"77","severity":1,"message":"78","line":56,"column":33,"nodeType":"79","endLine":56,"endColumn":83},{"ruleId":"77","severity":1,"message":"78","line":74,"column":45,"nodeType":"79","endLine":74,"endColumn":72},{"ruleId":"77","severity":1,"message":"78","line":91,"column":33,"nodeType":"79","endLine":91,"endColumn":58},{"ruleId":"69","severity":1,"message":"70","line":108,"column":52,"nodeType":"71","messageId":"72","endLine":108,"endColumn":58},{"ruleId":"65","replacedBy":"80"},{"ruleId":"67","replacedBy":"81"},{"ruleId":"65","replacedBy":"82"},{"ruleId":"67","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'imgUrl' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["84"],["85"],["84"],["85"],"no-global-assign","no-unsafe-negation"]